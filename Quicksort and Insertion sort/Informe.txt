Algoritmos - Grupo 2.1

Beltrán Aceves (beltran.aceves)

Melisa Barro (melisa.barro)

Dimitry Demyanov (d.demyanov)


En este ejercicio implementaremos dos algoritmos de ordenación de vectores, mediremos sus tiempos de ejecución para diferentes valores y analizaremos sus cotas.
El primero es ordenación por inserción, mientras que el segundo es el quicksort, para el cual realizaremos mediciones con distintos umbrales. Además, varían en cuanto
a su eficiencia, ya que ordenar por inserción es óptimo para vectores cortos, mientras que el quicksort lo es para vectores largos.
Las mediciones fueron hechas en un ordenador portátil Huawei Matebook D (Ubuntu 18.04 LTS, i5-7600u, 8GB RAM).


Nuestro código consta de dos funciones principales que gestionan el resto del programa:
En primer lugar, tenemos la función test que muestra que los algoritmos están correctamente implementados y ordenan los vectores como deberían.
A continuación, disponemos de otra serie de tests para cada algoritmo en los que se miden los tiempos de ejecución en microsegundos y además incluyen el caso especial en el que, si el tiempo
es inferior a 500 microsegundos, la medición del mismo se expresa en funcion de una media para dar un resultado preciso. 

Estos test constan, en primer lugar, de un bucle for que permitirá 'calentar' la máquina, calculando una iteración completa de la tabla (posteriormente, la segunda será impresa por
pantalla) para evitar que los tiempos salgan desordenados, que primero aumenten y luego decrezcan, o que no sean todo lo rápidos que podrían ser al estar el equipo
en un modo de ahorro de energía (excepto en la lectura de la Ordenación por Inserción de un vector ascendente, que son más ya que los primeros 3 valores suelen ser anómalos). Primero, ordena y mide el tiempo de ejecución, si este es inferior a 500 microsegundos, realiza la media de un gran numero de ejecuciones
para dar un resultado preciso (que se va incrementando en razon de 10 hasta que el tiempo total es mayor que 500 microsegundos). En estos casos, la medición irá acompañada de un asterisco.
Todos los tiempos fueron medidos sin ningún programa de fondo.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Ejercicio 4: La Ordenación por Inserción no se ve afectada por el umbral, mientras que el Quicksort es mas rápido cuanto más alto es el umbral (siempre y cuando sea menor que el número total de elementos del vector y no un número "demasiado grande"). Esto se produce porque cuanto mayor sea el umbral, más ordenaciones se realizarán con el Ordenación por Inserción, que es mas rápido que el Quicksort para vectores "pequeños".


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Ejercicio 5: 

Con respecto al análisis de las cota, definimos:
    n = como el tamaño del vector a ordenar.

    Para un vector ascendente:
    f(n) = como la cota subestimada. Quicksort: n; Ordenación por Inserción: n^0.6.
    g(n) = como la cota ajustada. Quicksort: n(log n); Ordenación por Inserción: n (Tiende a 0.00387). 
    h(n) = como la cota sobreestimada. Quicksort: n^2; Ordenación por Inserción: n^1.2.

    Para un vector descendente:
    f(n) = como la cota subestimada. Quicksort: n; Ordenación por Inserción: n^1.8.
    g(n) = como la cota ajustada. Quicksort: n(log n); Ordenación por Inserción: n^2 (Tiende a 0.00143). 
    h(n) = como la cota sobreestimada. Quicksort: n^2; Ordenación por Inserción: n^2.2.

    Para un vector aleatorio:
    f(n) = como la cota subestimada. Quicksort: n; Ordenación por Inserción: n^1.8.
    g(n) = como la cota ajustada. Quicksort: n(log n); Ordenación por Inserción: n^2 (Tiende a 0.000718). 
    h(n) = como la cota sobreestimada. Quicksort: n^2; Ordenación por Inserción: n^2.2.

Decimos que:
	- Las cotas subestimadas son correctas, ya que la funcion del tiempo t(n)/f(n) se aproxima al infinito.
	- Las cotas sobreestimadas son correctas, ya que la funcion del tiempo t(n)/g(n) se aproxima a una constante.
	- Las cotas ajustadas son correctas, ya que la funcion del tiempo t(n)/h(n) se aproxima a cero.

Y por lo tanto, las O de cada algoritmo:
        Quicksort: O(n(log n)).
        ordenación por Inserción: O(n^2).




ALGORITMO DE ORDENACiÓN RÁPIDA: 
(El umbral utilizado ha sido 1)

Tiempos v. asc(n)            n          Tiempo            sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       14.931000 *           0.029862        0.004805         0.000059724           10000
                          1000       32.706000 *           0.032706        0.004235         0.000032706           10000
                          2000       69.309000 *           0.034655        0.004559         0.000017327           10000
                          4000      146.202000 *           0.036550        0.004374         0.000009138           10000
                          8000      307.375000 *           0.038422        0.004275         0.000004803           10000
                         16000      648.000000             0.040500        0.004184         0.000002531               1
                         32000     1357.000000             0.042406        0.004088         0.000001325               1

Tiempos v. desc(n)            n       Tiempo              sub.  n      ajust. n(log n)      sobre.  n^2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       15.892000 *           0.031784        0.005114         0.000063568           10000
                          1000       33.864000 *           0.033864        0.004902         0.000033864           10000
                          2000       71.816000 *           0.035908        0.004724         0.000017954           10000
                          4000      151.474000 *           0.037868        0.004566         0.000009467           10000
                          8000      317.854000 *           0.039732        0.004421         0.000004966           10000
                         16000      669.000000             0.041813        0.004319         0.000002613               1
                         32000     1408.000000             0.044000        0.004242         0.000001375               1

Tiempos v. al(n)            n          Tiempo             sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       45.555000 *           0.091110        0.014661          0.00018222           10000
                          1000       98.086000 *           0.098086        0.014199          0.00009809           10000
                          2000      211.251000 *           0.105625        0.013896          0.00005281           10000
                          4000      451.229000 *           0.112807        0.013601          0.00002820           10000
                          8000      965.000000             0.120625        0.013422          0.00001508               1
                         16000     2063.000000             0.128938        0.013320          0.00000806               1
                         32000     4405.000000             0.137656        0.013270          0.00000430               1

Constante a la que tiende: 
    Ascendente: 0.00427
    Descendente:  0.00442
    Aleatorio: 0.0136

/***********************************************************************************************************************/


ALGORITMO DE ORDENACiÓN RÁPIDA: 
(El umbral utilizado ha sido 10)

Tiempos v. asc(n)            n          Tiempo            sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        9.875000 *           0.019750        0.003178         0.000039500           10000
                          1000       22.939000 *           0.022939        0.003321         0.000022939           10000
                          2000       48.764000 *           0.024382        0.003208         0.000012191           10000
                          4000      105.818000 *           0.026454        0.003190         0.000006614           10000
                          8000      226.076000 *           0.028259        0.003144         0.000003532           10000
                         16000      482.122000 *           0.030133        0.003113         0.000001883           10000
                         32000     1041.000000             0.032531        0.003136         0.000001017               1

Tiempos v. desc(n)            n       Tiempo              sub.  n      ajust. n(log n)      sobre.  n^2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       10.519000 *           0.021038        0.003385         0.000042076           10000
                          1000       23.803000 *           0.023803        0.003446         0.000023803           10000
                          2000       50.871000 *           0.025435        0.003346         0.000012718           10000
                          4000      109.686000 *           0.027421        0.003306         0.000006855           10000
                          8000      235.271000 *           0.029409        0.003272         0.000003676           10000
                         16000      504.000000             0.031500        0.003254         0.000001969               1
                         32000     1075.000000             0.033594        0.003238         0.000001050               1

Tiempos v. al(n)            n          Tiempo             sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       39.258000 *           0.078516        0.012634          0.00015703           10000
                          1000       84.677000 *           0.084677        0.012258          0.00008468           10000
                          2000      185.981000 *           0.092991        0.012234          0.00004650           10000
                          4000      401.921000 *           0.100480        0.012115          0.00002512           10000
                          8000      863.000000             0.107875        0.012003          0.00001348               1
                         16000     1887.000000             0.117938        0.012183          0.00000737               1
                         32000     4200.000000             0.131250        0.012652          0.00000410               1

Constante a la que tiende: 
    Ascendente: 0.00320
    Descendente: 0.00327
    Aleatorio: 0.0122

/***********************************************************************************************************************/


ALGORITMO DE ORDENACiÓN RÁPIDA: 
(El umbral utilizado ha sido 100)

Tiempos v. asc(n)            n          Tiempo            sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        5.364000 *           0.010728        0.001726         0.000021456           10000
                          1000       13.351000 *           0.013351        0.001933         0.000013351           10000
                          2000       30.204000 *           0.015102        0.001987         0.000007551           10000
                          4000       70.198000 *           0.017549        0.002116         0.000004387           10000
                          8000      155.730000 *           0.019466        0.002166         0.000002433           10000
                         16000      344.602000 *           0.021538        0.002225         0.000001346           10000
                         32000      751.000000             0.023469        0.002262         0.000000733               1

Tiempos v. desc(n)            n       Tiempo              sub.  n      ajust. n(log n)      sobre.  n^2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        6.025000 *           0.012050        0.001939         0.000024100           10000
                          1000       14.548000 *           0.014548        0.002106         0.000014548           10000
                          2000       33.601000 *           0.016800        0.002210         0.000008400           10000
                          4000       74.883000 *           0.018721        0.002257         0.000004680           10000
                          8000      165.697000 *           0.020712        0.002305         0.000002589           10000
                         16000      367.383000 *           0.022961        0.002372         0.000001435           10000
                         32000      799.000000             0.024969        0.002407         0.000000780               1

Tiempos v. al(n)            n          Tiempo             sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       47.674000 *           0.095348        0.015343          0.00019070           10000
                          1000       96.591000 *           0.096591        0.013983          0.00009659           10000
                          2000      208.890000 *           0.104445        0.013741          0.00005222           10000
                          4000      453.374000 *           0.113343        0.013666          0.00002834           10000
                          8000      982.000000             0.122750        0.013658          0.00001534               1
                         16000     2052.000000             0.128250        0.013248          0.00000802               1
                         32000     4391.000000             0.137219        0.013228          0.00000429               1

Constante a la que tiende: 
    Ascendente: 0.00211
    Descendente: 0.00225
    Aleatorio: 0.0136

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Como conclusión, podemos afirmar:
Con respecto a la Ordenación por Inserción, que funciona de manera óptima y eficaz para vectores de tamaños pequeños, sobre todo en el caso
más favorable (vector ascendente, pues ya está ordenado y solo lo recorre). El caso más desfavorable es el del vector descendente.
Con respecto al quicksort, como ya hemos dicho en los ejercicios 4 y 5, funciona mejor para vectores 'grandes' y umbrales mayores.

Standard Output:   


UMBRAL 1

...TEST ORDENACION POR INSERCION...

Ordenacion por insercion con inicializacion aleatoria: 
5 10 -13 -5 13 -3 7 5 9 -12 -11 13 -2 -8 4 
-13 -12 -11 -8 -5 -3 -2 4 5 5 7 9 10 13 13 

Ordenacion por insercion con inicializacion descendente: 
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 


...TEST ORDENACION RAPIDA...

Ordenacion rápida con inicializacion aleatoria: 
5 10 -13 -5 13 -3 7 5 9 -12 -11 13 -2 -8 4 
-13 -12 -11 -8 -5 -3 -2 4 5 5 7 9 10 13 13 

Ordenacion rápida con inicializacion descendente: 
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 



ALGORITMO DE ORDENACIÓN POR INSERCIÓN: 

Tiempos v. asc(n)            n          Tiempo          sub.  n^0.6       ajust.  n       sobre.  n^1.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        1.853600 *           0.044528        0.003707            0.001070          100000
                          1000        3.805000 *           0.060305        0.003805            0.000956           10000
                          2000        7.739000 *           0.080922        0.003870            0.000846           10000
                          4000       15.653000 *           0.107985        0.003913            0.000745           10000
                          8000       31.543000 *           0.143565        0.003943            0.000653           10000
                         16000       61.486000 *           0.184631        0.003843            0.000554           10000
                         32000      121.100000 *           0.239913        0.003784            0.000475           10000

Tiempos v. desc(n)            n          Tiempo          sub.  n^1.8     ajust.  n^2       sobre.  n^2.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500      360.070000 *           0.004992        0.001440            0.000416           10000
                          1000     1429.000000             0.005689        0.001429            0.000359               1
                          2000     5913.000000             0.006760        0.001478            0.000323               1
                          4000    22964.000000             0.007539        0.001435            0.000273               1
                          8000    90616.000000             0.008544        0.001416            0.000235               1
                         16000   362200.000000             0.009807        0.001415            0.000204               1
                         32000  1447281.000000             0.011253        0.001413            0.000178               1

Tiempos v. al(n)              n          Tiempo          sub.  n^1.8     ajust.  n^2       sobre.  n^2.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500      185.012000 *           0.002565        0.000745           0.0002135           10000
                          1000      730.000000             0.002906        0.000736           0.0001834               1
                          2000     2874.000000             0.003286        0.000718           0.0001571               1
                          4000    11687.000000             0.003837        0.000730           0.0001391               1
                          8000    46537.000000             0.004388        0.000727           0.0001205               1
                         16000   181451.000000             0.004913        0.000709           0.0001023               1
                         32000   727330.000000             0.005655        0.000710           0.0000892               1

Los tiempos acompañados de un asterisco (*) han sido medidos con un numero de iteraciones variable en un bucle


ALGORITMO DE ORDENACiÓN RÁPIDA: 
(El umbral utilizado ha sido 1)

Tiempos v. asc(n)            n          Tiempo            sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       14.931000 *           0.029862        0.004805         0.000059724           10000
                          1000       32.706000 *           0.032706        0.004735         0.000032706           10000
                          2000       69.309000 *           0.034655        0.004559         0.000017327           10000
                          4000      146.202000 *           0.036550        0.004407         0.000009138           10000
                          8000      307.375000 *           0.038422        0.004275         0.000004803           10000
                         16000      648.000000             0.040500        0.004184         0.000002531               1
                         32000     1357.000000             0.042406        0.004088         0.000001325               1

Tiempos v. desc(n)            n       Tiempo              sub.  n      ajust. n(log n)      sobre.  n^2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       15.892000 *           0.031784        0.005114         0.000063568           10000
                          1000       33.864000 *           0.033864        0.004902         0.000033864           10000
                          2000       71.816000 *           0.035908        0.004724         0.000017954           10000
                          4000      151.474000 *           0.037868        0.004566         0.000009467           10000
                          8000      317.854000 *           0.039732        0.004421         0.000004966           10000
                         16000      669.000000             0.041813        0.004319         0.000002613               1
                         32000     1408.000000             0.044000        0.004242         0.000001375               1

Tiempos v. al(n)            n          Tiempo             sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       45.555000 *           0.091110        0.014661          0.00018222           10000
                          1000       98.086000 *           0.098086        0.014199          0.00009809           10000
                          2000      211.251000 *           0.105625        0.013896          0.00005281           10000
                          4000      451.229000 *           0.112807        0.013601          0.00002820           10000
                          8000      965.000000             0.120625        0.013422          0.00001508               1
                         16000     2063.000000             0.128938        0.013320          0.00000806               1
                         32000     4405.000000             0.137656        0.013270          0.00000430               1


UMBRAL 10
...TEST ORDENACION POR INSERCION...

Ordenacion por insercion con inicializacion aleatoria: 
-10 -12 -7 -2 -1 -7 4 -5 14 -11 14 13 7 11 -2 
-12 -11 -10 -7 -7 -5 -2 -2 -1 4 7 11 13 14 14 

Ordenacion por insercion con inicializacion descendente: 
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 


...TEST ORDENACION RAPIDA...

Ordenacion rápida con inicializacion aleatoria: 
-10 -12 -7 -2 -1 -7 4 -5 14 -11 14 13 7 11 -2 
-12 -11 -10 -7 -7 -5 -2 -2 -1 4 7 11 13 14 14 

Ordenacion rápida con inicializacion descendente: 
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 



ALGORITMO DE ORDENACIÓN POR INSERCIÓN: 

Tiempos v. asc(n)            n          Tiempo          sub.  n^0.6       ajust.  n       sobre.  n^1.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        1.919200 *           0.046104        0.003838            0.001108          100000
                          1000        3.793000 *           0.060115        0.003793            0.000953           10000
                          2000        8.669000 *           0.090646        0.004334            0.000948           10000
                          4000       16.137000 *           0.111323        0.004034            0.000768           10000
                          8000       31.383000 *           0.142837        0.003923            0.000650           10000
                         16000       61.560000 *           0.184853        0.003848            0.000555           10000
                         32000      121.693000 *           0.241088        0.003803            0.000478           10000

Tiempos v. desc(n)            n          Tiempo          sub.  n^1.8     ajust.  n^2       sobre.  n^2.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500      359.792000 *           0.004988        0.001439            0.000415           10000
                          1000     1419.000000             0.005649        0.001419            0.000356               1
                          2000     6394.000000             0.007310        0.001599            0.000350               1
                          4000    22683.000000             0.007447        0.001418            0.000270               1
                          8000    90895.000000             0.008570        0.001420            0.000235               1
                         16000   362633.000000             0.009819        0.001417            0.000204               1
                         32000  1450022.000000             0.011275        0.001416            0.000178               1

Tiempos v. al(n)              n          Tiempo          sub.  n^1.8     ajust.  n^2       sobre.  n^2.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500      185.293000 *           0.002569        0.000741           0.0002139           10000
                          1000      720.000000             0.002866        0.000720           0.0001809               1
                          2000     2852.000000             0.003261        0.000713           0.0001559               1
                          4000    11563.000000             0.003796        0.000723           0.0001376               1
                          8000    45500.000000             0.004290        0.000711           0.0001178               1
                         16000   181796.000000             0.004922        0.000710           0.0001025               1
                         32000   723473.000000             0.005625        0.000707           0.0000887               1

Los tiempos acompañados de un asterisco (*) han sido medidos con un numero de iteraciones variable en un bucle


ALGORITMO DE ORDENACiÓN RÁPIDA: 
(El umbral utilizado ha sido 10)

Tiempos v. asc(n)            n          Tiempo            sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        9.875000 *           0.019750        0.003178         0.000039500           10000
                          1000       22.939000 *           0.022939        0.003321         0.000022939           10000
                          2000       48.764000 *           0.024382        0.003208         0.000012191           10000
                          4000      105.818000 *           0.026454        0.003190         0.000006614           10000
                          8000      226.076000 *           0.028259        0.003144         0.000003532           10000
                         16000      482.122000 *           0.030133        0.003113         0.000001883           10000
                         32000     1041.000000             0.032531        0.003136         0.000001017               1

Tiempos v. desc(n)            n       Tiempo              sub.  n      ajust. n(log n)      sobre.  n^2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       10.519000 *           0.021038        0.003385         0.000042076           10000
                          1000       23.803000 *           0.023803        0.003446         0.000023803           10000
                          2000       50.871000 *           0.025435        0.003346         0.000012718           10000
                          4000      109.686000 *           0.027421        0.003306         0.000006855           10000
                          8000      235.271000 *           0.029409        0.003272         0.000003676           10000
                         16000      504.000000             0.031500        0.003254         0.000001969               1
                         32000     1075.000000             0.033594        0.003238         0.000001050               1

Tiempos v. al(n)            n          Tiempo             sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       39.258000 *           0.078516        0.012634          0.00015703           10000
                          1000       84.677000 *           0.084677        0.012258          0.00008468           10000
                          2000      185.981000 *           0.092991        0.012234          0.00004650           10000
                          4000      401.921000 *           0.100480        0.012115          0.00002512           10000
                          8000      863.000000             0.107875        0.012003          0.00001348               1
                         16000     1887.000000             0.117938        0.012183          0.00000737               1
                         32000     4200.000000             0.131250        0.012652          0.00000410               1


UMBRAL 100
...TEST ORDENACION POR INSERCION...

Ordenacion por insercion con inicializacion aleatoria: 
5 4 11 -8 10 -10 -1 13 2 5 11 -8 -14 14 8 
-14 -10 -8 -8 -1 2 4 5 5 8 10 11 11 13 14 

Ordenacion por insercion con inicializacion descendente: 
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 


...TEST ORDENACION RAPIDA...

Ordenacion rápida con inicializacion aleatoria: 
5 4 11 -8 10 -10 -1 13 2 5 11 -8 -14 14 8 
-14 -10 -8 -8 -1 2 4 5 5 8 10 11 11 13 14 

Ordenacion rápida con inicializacion descendente: 
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 



ALGORITMO DE ORDENACIÓN POR INSERCIÓN: 

Tiempos v. asc(n)            n          Tiempo          sub.  n^0.6       ajust.  n       sobre.  n^1.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        0.580000 *           0.013933        0.001160            0.000335           10000
                          1000        3.859000 *           0.061161        0.003859            0.000969           10000
                          2000        8.913000 *           0.093198        0.003957            0.000975           10000
                          4000       16.924000 *           0.116753        0.004031            0.000805           10000
                          8000       33.935000 *           0.154452        0.004242            0.000703           10000
                         16000       61.064000 *           0.183364        0.003817            0.000551           10000
                         32000      120.208000 *           0.238146        0.003756            0.000472           10000

Tiempos v. desc(n)            n          Tiempo          sub.  n^1.8     ajust.  n^2       sobre.  n^2.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500      358.067000 *           0.004964        0.001432            0.000413           10000
                          1000     1424.000000             0.005669        0.001424            0.000358               1
                          2000     5930.000000             0.006780        0.001483            0.000324               1
                          4000    22755.000000             0.007471        0.001422            0.000271               1
                          8000    90979.000000             0.008578        0.001422            0.000236               1
                         16000   362961.000000             0.009828        0.001418            0.000205               1
                         32000  1459732.000000             0.011350        0.001426            0.000179               1

Tiempos v. al(n)              n          Tiempo          sub.  n^1.8     ajust.  n^2       sobre.  n^2.2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500      185.385000 *           0.002570        0.000742           0.0002140           10000
                          1000      693.000000             0.002759        0.000693           0.0001741               1
                          2000     2951.000000             0.003374        0.000738           0.0001613               1
                          4000    11643.000000             0.003823        0.000728           0.0001385               1
                          8000    45925.000000             0.004330        0.000718           0.0001189               1
                         16000   184407.000000             0.004993        0.000720           0.0001039               1
                         32000   724650.000000             0.005635        0.000708           0.0000889               1

Los tiempos acompañados de un asterisco (*) han sido medidos con un numero de iteraciones variable en un bucle


ALGORITMO DE ORDENACiÓN RÁPIDA: 
(El umbral utilizado ha sido 100)

Tiempos v. asc(n)            n          Tiempo            sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        5.364000 *           0.010728        0.001726         0.000021456           10000
                          1000       13.351000 *           0.013351        0.001933         0.000013351           10000
                          2000       30.204000 *           0.015102        0.001987         0.000007551           10000
                          4000       70.198000 *           0.017549        0.002116         0.000004387           10000
                          8000      155.730000 *           0.019466        0.002166         0.000002433           10000
                         16000      344.602000 *           0.021538        0.002225         0.000001346           10000
                         32000      751.000000             0.023469        0.002262         0.000000733               1

Tiempos v. desc(n)            n       Tiempo              sub.  n      ajust. n(log n)      sobre.  n^2         Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500        6.025000 *           0.012050        0.001939         0.000024100           10000
                          1000       14.548000 *           0.014548        0.002106         0.000014548           10000
                          2000       33.601000 *           0.016800        0.002210         0.000008400           10000
                          4000       74.883000 *           0.018721        0.002257         0.000004680           10000
                          8000      165.697000 *           0.020712        0.002305         0.000002589           10000
                         16000      367.383000 *           0.022961        0.002372         0.000001435           10000
                         32000      799.000000             0.024969        0.002407         0.000000780               1

Tiempos v. al(n)            n          Tiempo             sub.  n      ajust. n(log n)         sobre.  n^2       Iter(*)
-------------------------------------------------------------------------------------------------------------------------
                           500       47.674000 *           0.095348        0.015343          0.00019070           10000
                          1000       96.591000 *           0.096591        0.013983          0.00009659           10000
                          2000      208.890000 *           0.104445        0.013741          0.00005222           10000
                          4000      453.374000 *           0.113343        0.013666          0.00002834           10000
                          8000      982.000000             0.122750        0.013658          0.00001534               1
                         16000     2052.000000             0.128250        0.013248          0.00000802               1
                         32000     4391.000000             0.137219        0.013228          0.00000429               1

                        
